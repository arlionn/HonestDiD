hybrid_flag = "LF")
tibble(lb = min(temp$grid[temp$accept == 1]),
ub = max(temp$grid[temp$accept == 1]),
method = "C-LF",
Delta = Delta, M = Mvec[m])
}
}
} else{
stop("Method must equal one of: FLCI, Conditional, C-F or C-LF")
}
} else {
if (is.null(method)) {
method = "C-F"
}
if (monotonicityDirection == "increasing") {
Delta = "DeltaSDI"
} else {
Delta = "DeltaSDD"
}
if (method == "FLCI") {
warning("You specified a shape restriction but method = FLCI. The FLCI does not use the shape restriction!")
if (parallel == FALSE) {
Results = foreach(m = 1:length(Mvec), .combine = 'rbind') %do% {
temp = findOptimalFLCI(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = Mvec[m], alpha = 0.05)
tibble(lb = temp$FLCI[1], ub = temp$FLCI[2],
method = "FLCI", Delta = Delta, M = Mvec[m])
}
} else {
Results = foreach(m = 1:length(Mvec), .combine = 'rbind') %dopar% {
temp = findOptimalFLCI(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = Mvec[m], alpha = 0.05)
tibble(lb = temp$FLCI[1], ub = temp$FLCI[2],
method = "FLCI", Delta = Delta, M = Mvec[m])
}
}
} else if (method == "Conditional") { # If method = Conditional, construct conditional confidence intervals
if (parallel == FALSE) {
Results = foreach(m = 1:length(Mvec), .combine = 'rbind') %do% {
temp = computeConditionalCS_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "ARP")
tibble(lb = min(temp$grid[temp$accept == 1]),
ub = max(temp$grid[temp$accept == 1]),
method = "Conditional",
Delta = Delta, M = Mvec[m])
}
} else {
Results = foreach(m = 1:length(Mvec), .combine = 'rbind') %dopar% {
temp = computeConditionalCS_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "ARP")
tibble(lb = min(temp$grid[temp$accept == 1]),
ub = max(temp$grid[temp$accept == 1]),
method = "Conditional",
Delta = Delta, M = Mvec[m])
}
}
} else if (method == "C-F") { # If method = C-F, construct conditional FLCI,
if (parallel == FALSE) {
Results = foreach(m = 1:length(Mvec), .combine = 'rbind') %do% {
temp = computeConditionalCS_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "FLCI")
tibble(lb = min(temp$grid[temp$accept == 1]),
ub = max(temp$grid[temp$accept == 1]),
method = "C-F",
Delta = Delta,
M = Mvec[m])
}
} else {
Results = foreach(m = 1:length(Mvec), .combine = 'rbind') %dopar% {
temp = computeConditionalCS_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "FLCI")
tibble(lb = min(temp$grid[temp$accept == 1]),
ub = max(temp$grid[temp$accept == 1]),
method = "C-F",
Delta = Delta,
M = Mvec[m])
}
}
} else if (method == "C-LF") {
if (parallel == FALSE) {
Results = foreach(m = 1:length(Mvec), .combine = 'rbind') %do% {
temp = computeConditionalCS_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "LF")
tibble(lb = min(temp$grid[temp$accept == 1]),
ub = max(temp$grid[temp$accept == 1]),
method = "C-LF",
Delta = Delta, M = Mvec[m])
}
} else {
Results = foreach(m = 1:length(Mvec), .combine = 'rbind') %dopar% {
temp = computeConditionalCS_DeltaSDM(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, alpha = alpha, M = Mvec[m],
monotonicityDirection = monotonicityDirection,
hybrid_flag = "LF")
tibble(lb = min(temp$grid[temp$accept == 1]),
ub = max(temp$grid[temp$accept == 1]),
method = "C-LF",
Delta = Delta, M = Mvec[m])
}
}
} else{
stop("Method must equal one of: FLCI, Conditional, C-F or C-LF")
}
}
return(Results)
}
constructOriginalCS <- function(betahat, sigma,
numPrePeriods, numPostPeriods,
l_vec = .basisVector(index = 1, size = numPostPeriods),
alpha = 0.05) {
stdError = sqrt(t(l_vec) %*% sigma[(numPrePeriods+1):(numPrePeriods+numPostPeriods), (numPrePeriods+1):(numPrePeriods+numPostPeriods)] %*% l_vec)
lb = t(l_vec) %*% betahat[(numPrePeriods+1):(numPrePeriods+numPostPeriods)] - qnorm(1-alpha)*stdError
ub = t(l_vec) %*% betahat[(numPrePeriods+1):(numPrePeriods+numPostPeriods)] + qnorm(1-alpha)*stdError
return(tibble(
lb = lb,
ub = ub,
method = "Original",
Delta = NA,
M = 0
))
}
# Sensitivity plot functions ------------------------------------------
createEventStudyPlot <- function(betahat, stdErrors = NULL, sigma = NULL,
numPrePeriods, numPostPeriods,
timeVec, referencePeriod,
useRelativeEventTime = F) {
if (is.null(stdErrors) & is.null(sigma)) {
stop("User must specify either vector of standard errors or vcv matrix!")
} else if (is.null(stdErrors) & !is.null(sigma)) {
stdErrors = sqrt(diag(sigma))
}
if (useRelativeEventTime == T) {
timeVec = timeVec - referencePeriod
referencePeriod = 0
}
EventStudyPlot <- ggplot(tibble(t = c(timeVec[1:numPrePeriods], referencePeriod, timeVec[(numPrePeriods+1):(numPrePeriods+numPostPeriods)]),
beta = c(betahat[1:numPrePeriods], 0, betahat[(numPrePeriods+1):(numPrePeriods+numPostPeriods)]),
se = c(stdErrors[1:numPrePeriods], NA, stdErrors[(numPrePeriods+1):(numPrePeriods+numPostPeriods)])),
aes(x = t)) +
geom_point(aes(y = beta), color = "red") +
geom_errorbar(aes(ymin = beta - qnorm(0.975)*se, ymax = beta + qnorm(0.975)*se), width = 0.5, colour = "#01a2d9") +
theme(legend.position = "none") + labs(x = "Event time", y = "") +
scale_x_continuous(breaks = seq(from = min(timeVec), to = max(timeVec), by = 1),
labels = as.character(seq(from = min(timeVec), to = max(timeVec), by = 1)))
return(EventStudyPlot)
}
createSensitivityPlot <- function(robustResults, originalResults, rescaleFactor = 1, maxM = Inf, add_xAxis = TRUE) {
# Set M for OLS to be the min M in robust results minus the gap between Ms in robust
Mgap <- min( diff( sort( robustResults$M) ) )
Mmin <- min( robustResults$M)
originalResults$M <- Mmin - Mgap
df <- bind_rows(originalResults, robustResults)
# Rescale all the units by rescaleFactor
df <- df %>% mutate_at( c("M", "ub", "lb"), ~ .x * rescaleFactor)
# Filter out observations above maxM (after rescaling)
df <- df %>% filter(M <= maxM)
p <- ggplot(data = df, aes(x=M)) +
geom_errorbar(aes(ymin = lb, ymax = ub, color = factor(method)),
width = Mgap * rescaleFactor / 2) +
scale_color_manual(values = c("red", '#01a2d9')) +
theme(legend.title=element_blank(), legend.position="bottom") +
labs(x = "M", y = "")
if (add_xAxis) {
p <- p + geom_hline(yintercept = 0)
}
return(p)
}
# Other helper functions ----
basisVector <- function(index = 1, size = 1){
v <- matrix(0, nrow = size, ncol = 1)
v[index] = 1
return(v)
}
set.seed(1234567890)
numPrePeriods = 5
numPostPeriods = 1
betahat = c(mvtnorm::rmvnorm(1, mean = c(rep(0, numPrePeriods), rep(0, numPostPeriods))))
sigma = diag(numPrePeriods + numPostPeriods)
l_vec = basisVector(index = 1, size = numPostPeriods)
test_conditionalCS_SDPB =  computeConditionalCS_DeltaSDB(betahat = betahat, sigma = sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0,
biasDirection = "positive",
hybrid_flag = "ARP")
test_conditionalCS_RMI = computeConditionalCS_DeltaRMI(betahat = betahat, sigma = sigma, numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods, l_vec = l_vec, Mbar = 0,
hybrid_flag = "LF"
returnLength = F, postPeriodMomentsOnly = T,
gridPoints=10^3, grid.ub = NA, grid.lb = NA)
test_conditionalCS_RMI = computeConditionalCS_DeltaRMI(betahat = betahat, sigma = sigma, numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods, l_vec = l_vec, Mbar = 0,
hybrid_flag = "LF",
returnLength = F, postPeriodMomentsOnly = T,
gridPoints=10^3, grid.ub = NA, grid.lb = NA)
source('~/Desktop/temp-1postperod.R')
options(warn = 2)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
library("HonestDiD")
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
View(DeltaSD_RobustResults)
View(DeltaSD_RobustResults)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
options(warn = 1)
View(DeltaSD_RobustResults)
View(DeltaSD_RobustResults)
sessionInfo()
data('LWdata_EventStudy')
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults
options(warn = 2)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
seq(from = 0, to = 0.04, by = 0.005)
seq(from = 0, to = 0.04, by = 0.005)[1]
type(seq(from = 0, to = 0.04, by = 0.005)[1])
c(seq(from = 0, to = 0.04, by = 0.005)[1])
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
length(seq(from = 0, to = 0.04, by = 0.005))
1
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 005)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 005)
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
options(warn=1)
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
View(DeltaSD_RobustResults)
options(warn = 2)
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
?as.data.frame
default.stringsAsFactors()
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
install.packages("devtools") # if devtools package not installed
devtools::install_github("asheshrambachan/HonestDiD")
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
View(DeltaSD_RobustResults)
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
View(DeltaSD_RobustResults)
options(warn = 1)
devtools::install_github("asheshrambachan/HonestDiD")
library(HonestDiD)
data('LWdata_EventStudy')
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
library(HonestDiD)
devtools::install_github("asheshrambachan/HonestDiD")
devtools::install_github("asheshrambachan/HonestDiD", force = TRUE)
library('HonestDiD')
install.packages('rlang')
install.packages("rlang")
library('HonestDiD')
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
View(DeltaSD_RobustResults)
sessionInfo()
devtools::install_github("asheshrambachan/HonestDiD", force = TRUE)
sessionInfo()
library(HonestDiD)
detach("package:HonestDiD", unload = TRUE)
library(HonestDiD)
detach("package:HonestDiD", unload = TRUE)
library(HonestDiD)
