l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
options(warn = 1)
View(DeltaSD_RobustResults)
View(DeltaSD_RobustResults)
sessionInfo()
data('LWdata_EventStudy')
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults
options(warn = 2)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
seq(from = 0, to = 0.04, by = 0.005)
seq(from = 0, to = 0.04, by = 0.005)[1]
type(seq(from = 0, to = 0.04, by = 0.005)[1])
c(seq(from = 0, to = 0.04, by = 0.005)[1])
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
length(seq(from = 0, to = 0.04, by = 0.005))
1
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 005)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 005)
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
options(warn=1)
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
View(DeltaSD_RobustResults)
options(warn = 2)
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWdata_EventStudy$betahat, sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
findOptimalFLCI(betahat = LWData_EventStudy$betahat, sigma = LWData_EventStudy$sigma,
numPrePeriods = numPrePeriods, numPostPeriods = numPostPeriods,
l_vec = l_vec, M = 0, alpha = 0.05)
?as.data.frame
default.stringsAsFactors()
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
install.packages("devtools") # if devtools package not installed
devtools::install_github("asheshrambachan/HonestDiD")
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
View(DeltaSD_RobustResults)
#Create l_vec corresponding with 15 years of exposure
# Reference is -2 years of exposure, so want effect 17 pds later
l_vec = basisVector(15 - (-2), numPostPeriods)
# Construct robust confidence intervals for Delta^{SD}(M) for 15 years of exposure
DeltaSD_RobustResults = createSensitivityResults(betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = numPrePeriods,
numPostPeriods = numPostPeriods,
l_vec = l_vec,
Mvec = seq(from = 0, to = 0.04, by = 0.005))
head(DeltaSD_RobustResults)
View(DeltaSD_RobustResults)
options(warn = 1)
devtools::install_github("asheshrambachan/HonestDiD")
library(HonestDiD)
data('LWdata_EventStudy')
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
library(HonestDiD)
devtools::install_github("asheshrambachan/HonestDiD")
devtools::install_github("asheshrambachan/HonestDiD", force = TRUE)
library('HonestDiD')
install.packages('rlang')
install.packages("rlang")
library('HonestDiD')
DeltaSD_RobustResults <- createSensitivityResults(
betahat = LWdata_EventStudy$betahat,
sigma = LWdata_EventStudy$sigma,
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices),
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices),
l_vec = basisVector(15 - (-2), length(LWdata_EventStudy$postPeriodIndices)),
Mvec = seq(from = 0, to = 0.04, by = 0.005)
)
View(DeltaSD_RobustResults)
sessionInfo()
devtools::install_github("asheshrambachan/HonestDiD", force = TRUE)
sessionInfo()
library(HonestDiD)
detach("package:HonestDiD", unload = TRUE)
library(HonestDiD)
detach("package:HonestDiD", unload = TRUE)
library(HonestDiD)
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
temp = readRDS("~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
save(temp, "~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
save(temp, file = "~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/LWdata_EventStudy.rda")
diag(LWdata_EventStudy$sigma)
diag(LWdata_EventStudy$stdErrors)
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
BCdata_EventStudy <- temp
save(temp, file = "~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
BCdata_EventStudy <- temp
save(BCdata_EventStudy, file = "~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
library(HonestDiD)
load("~/Dropbox/HonestParallelTrends/HonestDiD/data/BCdata_EventStudy.rda")
BCdata_EventStudy$prePeriodIndices
BCdata_EventStudy$sigma[5,5]
BCdata_EventStudy$sigma[5,5]*20
sqrt(BCdata_EventStudy$sigma[5,5])*20
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('BCdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
BC_numPrePeriods = length(BCdata_EventStudy$prePeriodIndices)
BC_numPostPeriods = length(BCdata_EventStudy$postPeriodIndices)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = size = BC_numPostPeriods)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = 1, size = BC_numPostPeriods)
# Construct robust confidence intervals for Delta^{SDRM}(Mbar) for first post-treatment period
# We specify 100 gridPoints over [-1, 1] for the underlying test inversion to construct the robust confidence set
# Users may wish to leave this at the default values.
BC_DeltaSDRM_RobustResults = createSensitivityResults_relativeMagnitudes(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mbarvec = seq(from = 0, to = 2, by = 0.5),
gridPoints = 100, grid.lb = -1, grid.ub = 1)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('BCdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
BC_numPrePeriods = length(BCdata_EventStudy$prePeriodIndices)
BC_numPostPeriods = length(BCdata_EventStudy$postPeriodIndices)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = 1, size = BC_numPostPeriods)
# Construct robust confidence intervals for Delta^{SDRM}(Mbar) for first post-treatment period
# We specify 100 gridPoints over [-1, 1] for the underlying test inversion to construct the robust confidence set
# Users may wish to leave this at the default values.
BC_DeltaSDRM_RobustResults = createSensitivityResults_relativeMagnitudes(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mbarvec = seq(from = 0, to = 2, by = 0.5),
gridPoints = 100, grid.lb = -1, grid.ub = 1)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('BCdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
BC_numPrePeriods = length(BCdata_EventStudy$prePeriodIndices)
BC_numPostPeriods = length(BCdata_EventStudy$postPeriodIndices)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = 1, size = BC_numPostPeriods)
# Construct robust confidence intervals for Delta^{SDRM}(Mbar) for first post-treatment period
# We specify 100 gridPoints over [-1, 1] for the underlying test inversion to construct the robust confidence set
# Users may wish to leave this at the default values.
BC_DeltaSDRM_RobustResults = createSensitivityResults_relativeMagnitudes(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mbarvec = seq(from = 0, to = 2, by = 0.5),
gridPoints = 100, grid.lb = -1, grid.ub = 1)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('BCdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
BC_numPrePeriods = length(BCdata_EventStudy$prePeriodIndices)
BC_numPostPeriods = length(BCdata_EventStudy$postPeriodIndices)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = 1, size = BC_numPostPeriods)
# Construct robust confidence intervals for Delta^{SDRM}(Mbar) for first post-treatment period
# We specify 100 gridPoints over [-1, 1] for the underlying test inversion to construct the robust confidence set
# Users may wish to leave this at the default values.
BC_DeltaSDRM_RobustResults = createSensitivityResults_relativeMagnitudes(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mbarvec = seq(from = 0, to = 2, by = 0.5),
gridPoints = 100, grid.lb = -1, grid.ub = 1)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('BCdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
BC_numPrePeriods = length(BCdata_EventStudy$prePeriodIndices)
BC_numPostPeriods = length(BCdata_EventStudy$postPeriodIndices)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = 1, size = BC_numPostPeriods)
# Construct robust confidence intervals for Delta^{SDRM}(Mbar) for first post-treatment period
# We specify 100 gridPoints over [-1, 1] for the underlying test inversion to construct the robust confidence set
# Users may wish to leave this at the default values.
BC_DeltaSDRM_RobustResults = createSensitivityResults_relativeMagnitudes(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mbarvec = seq(from = 0, to = 2, by = 0.5),
gridPoints = 100, grid.lb = -1, grid.ub = 1)
View(BC_DeltaSDRM_RobustResults)
`sdmbresults-profits` <- readRDS("~/Dropbox/HonestParallelTrends_ECMA_ReplicationFiles/Outputs/BenzartiCarloni/sdmbresults-profits.rds")
View(`sdmbresults-profits`)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = 1, size = BC_numPostPeriods)
# Construct robust confidence intervals for Delta^{SDRM}(Mbar) for first post-treatment period
# We specify 100 gridPoints over [-1, 1] for the underlying test inversion to construct the robust confidence set
# Users may wish to leave this at the default values.
BC_DeltaSDRM_RobustResults = createSensitivityResults_relativeMagnitudes(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
bound = "deviation from linear trend",
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mbarvec = seq(from = 0, to = 2, by = 0.5),
gridPoints = 100, grid.lb = -1, grid.ub = 1)
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('BCdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
BC_numPrePeriods = length(BCdata_EventStudy$prePeriodIndices)
BC_numPostPeriods = length(BCdata_EventStudy$postPeriodIndices)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = 1, size = BC_numPostPeriods)
# Construct robust confidence intervals for Delta^{SDRM}(Mbar) for first post-treatment period
# We specify 100 gridPoints over [-1, 1] for the underlying test inversion to construct the robust confidence set
# Users may wish to leave this at the default values.
BC_DeltaSDRM_RobustResults = createSensitivityResults_relativeMagnitudes(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
bound = "deviation from linear trend",
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mbarvec = seq(from = 0, to = 2, by = 0.5),
gridPoints = 100, grid.lb = -1, grid.ub = 1)
View(BC_DeltaSDRM_RobustResults)
`sdmbresults-profits` <- readRDS("~/Dropbox/HonestParallelTrends_ECMA_ReplicationFiles/Outputs/BenzartiCarloni/sdmbresults-profits.rds")
`sdmbresults-profits` <- `sdmbresults-profits` %>% filter(Mbar %in% c(0, 0.5, 1.0, 1.5, 2.0))
View(`sdmbresults-profits`)
View(BC_DeltaSDRM_RobustResults)
# Construct dataframe with OLS confidence interval for theta
BC_OriginalResults = constructOriginalCS(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec )
# Construct sensitivity plot
BC_DeltaSDRM_SensitivityPlot = createSensitivityPlot_relativeMagnitudes(robustResults = BC_DeltaSDRM_RobustResults,
originalResults = BC_OriginalResults)
BC_DeltaSDRM_SensitivityPlot
# Construct robust confidence intervals for Delta^{SDNB}(M) for first post-treatment period
BC_DeltaSDNB_RobustResults = createSensitivityResults(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mvec = seq(from = 0, to = 0.3, by = 0.1),
biasDirection = "negative")
createSensitivityResults(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mvec = c(0),
biasDirection = "negative")
computeConditionalCS_DeltaSDB(betahat = BCdata_EventStudy$betahat, sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec, alpha = 0.05, M = 0,
biasDirection = "negative",
hybrid_flag = "FLCI")
library(HonestDiD)
library('knitr')
knitr::opts_knit$set(self.contained = FALSE)
knitr::opts_chunk$set(tidy = TRUE, collapse=TRUE, comment = "#>",
tidy.opts=list(blank=FALSE, width.cutoff=60))
library('HonestDiD')
data('BCdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
BC_numPrePeriods = length(BCdata_EventStudy$prePeriodIndices)
BC_numPostPeriods = length(BCdata_EventStudy$postPeriodIndices)
# Create l_vec to define the parameter of interest, the first post-treatment period.
BC_l_vec = basisVector(index = 1, size = BC_numPostPeriods)
# Construct robust confidence intervals for Delta^{SDRM}(Mbar) for first post-treatment period
# We specify 100 gridPoints over [-1, 1] for the underlying test inversion to construct the robust confidence set
# Users may wish to leave this at the default values.
BC_DeltaSDRM_RobustResults = createSensitivityResults_relativeMagnitudes(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
bound = "deviation from linear trend",
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mbarvec = seq(from = 0, to = 2, by = 0.5),
gridPoints = 100, grid.lb = -1, grid.ub = 1)
# Construct robust confidence intervals for Delta^{SDNB}(M) for first post-treatment period
BC_DeltaSDNB_RobustResults = createSensitivityResults(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec,
Mvec = seq(from = 0, to = 0.3, by = 0.1),
biasDirection = "negative")
BC_DeltaSDNB_SensitivityPlot = createSensitivityPlot(robustResults = BC_DeltaSDNB_RobustResults,
originalResults = BC_OriginalResults)
# Construct dataframe with OLS confidence interval for theta
BC_OriginalResults = constructOriginalCS(betahat = BCdata_EventStudy$betahat,
sigma = BCdata_EventStudy$sigma,
numPrePeriods = BC_numPrePeriods,
numPostPeriods = BC_numPostPeriods,
l_vec = BC_l_vec )
# Construct sensitivity plot
BC_DeltaSDRM_SensitivityPlot = createSensitivityPlot_relativeMagnitudes(robustResults = BC_DeltaSDRM_RobustResults,
originalResults = BC_OriginalResults)
BC_DeltaSDRM_SensitivityPlot
BC_DeltaSDNB_SensitivityPlot = createSensitivityPlot(robustResults = BC_DeltaSDNB_RobustResults,
originalResults = BC_OriginalResults)
BC_DeltaSDNB_SensitivityPlot
data('LWdata_EventStudy', package = "HonestDiD")
# Number of pre-periods
numPrePeriods = length(LWdata_EventStudy$prePeriodIndices)
numPostPeriods = length(LWdata_EventStudy$postPeriodIndices)
getwd()
devtools::build_manual()
devtools::build_manual(path = "/Users/Ashesh/Dropbox/HonestParallelTrends/HonestDiD")
devtools::build_manual(path = "/Users/Ashesh/Dropbox/HonestParallelTrends/HonestDiD")
devtools::build_manual(path = "/Users/Ashesh/Dropbox/HonestParallelTrends/HonestDiD")
library(HonestDiD)
